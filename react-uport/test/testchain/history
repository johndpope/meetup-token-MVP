
// Load the generated ABI and bytecode
loadScript("Workshop.js");
// Display some information
console.log("RESULT: " + JSON.stringify(workshopOutput));
# Extract the contract ABI
var workshopAbi = JSON.parse(workshopOutput.contracts["Workshop.sol:Workshop"].abi);
# Extract the contract bytecode
var workshopBin = "0x" + workshopOutput.contracts["Workshop.sol:Workshop"].bin;
# Display both values
console.log("RESULT: workshopAbi=" + JSON.stringify(workshopAbi));
console.log("RESULT: workshopBin=" + JSON.stringify(workshopBin));
// -----------------------------------------------------------------------------
var deployWorkshopMessage = "Deploy Workshop";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployWorkshopMessage + " ---");
var workshopContract = web3.eth.contract(workshopAbi);
console.log("RESULT: " + JSON.stringify(workshopContract));
var workshopTx = null;
var workshopAddress = null;
var workshop = workshopContract.new({from: eth.accounts[0], data: workshopBin, gas: 4000000},
  function(e, contract) {
    if (!e) {
      if (!contract.address) {
        workshopTx = contract.transactionHash;
      } else {
        workshopAddress = contract.address;
        console.log("DATA: workshopAddress=" + workshopAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// Display the values of var1 and var2
console.log("RESULT: var1=" + workshop.var1());
console.log("RESULT: var2=" + workshop.var2());
console.log("RESULT: ");
// Load the generated ABI and bytecode
loadScript("Workshop.js");
// Display some information
console.log("RESULT: " + JSON.stringify(workshopOutput));
# Extract the contract ABI
var workshopAbi = JSON.parse(workshopOutput.contracts["Workshop.sol:Workshop"].abi);
# Extract the contract bytecode
var workshopBin = "0x" + workshopOutput.contracts["Workshop.sol:Workshop"].bin;
# Display both values
console.log("RESULT: workshopAbi=" + JSON.stringify(workshopAbi));
console.log("RESULT: workshopBin=" + JSON.stringify(workshopBin));
// -----------------------------------------------------------------------------
var deployWorkshopMessage = "Deploy Workshop";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployWorkshopMessage + " ---");
var workshopContract = web3.eth.contract(workshopAbi);
console.log("RESULT: " + JSON.stringify(workshopContract));
var workshopTx = null;
var workshopAddress = null;
var workshop = workshopContract.new({from: eth.accounts[0], data: workshopBin, gas: 4000000},
  function(e, contract) {
    if (!e) {
      if (!contract.address) {
        workshopTx = contract.transactionHash;
      } else {
        workshopAddress = contract.address;
        console.log("DATA: workshopAddress=" + workshopAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// Display the values of var1 and var2
console.log("RESULT: var1=" + workshop.var1());
console.log("RESULT: var2=" + workshop.var2());
console.log("RESULT: ");
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
// console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Register users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
//console.log("RESULT: users(0)=" + meetupBase.getUser(0));
//console.log("RESULT: users(1)=" + meetupBase.getUser(1));
meetupBase.createUser("A", {from: eth.accounts[0], gas:4000000, gasPrice:100});
//meetupBase.createUser("B", {from: eth.accounts[1], gas:4000000, gasPrice:100});
//meetupBase.createUser("C", {from: eth.accounts[2], gas:4000000, gasPrice:100});
//meetupBase.createUser("D", {from: eth.accounts[3], gas:4000000, gasPrice:100});
//meetupBase.createUser("E", {from: eth.accounts[4], gas:4000000, gasPrice:100});
console.log("RESULT: users(0)=" + meetupBase.getUser(0));
//console.log("RESULT: users(1)=" + meetupBase.getUser(1));
//console.log("RESULT: users(2)=" + meetupBase.getUser(2));
// -----------------------------------------------------------------------------
//var checkMeetupMessage = "Check meetups";
// -----------------------------------------------------------------------------
//console.log("RESULT: --- " + checkMeetupMessage + " ---");
//console.log("RESULT: meetups.length=" + meetupBase.getMeetupCount())
// Display the values of var1 and var2
//console.log("RESULT: var1=" + meetupBase.var1());
//console.log("RESULT: var2=" + meetupBase.var2());
//console.log("RESULT: ");
// -----------------------------------------------------------------------------
var modifyVarssMessage = "Modifying Vars";
// -----------------------------------------------------------------------------
//console.log("RESULT: --- " + modifyVarssMessage + " ---");
//var modifyVars1Tx = MeetupBase.setVar1("Hello, World!4567890123456789012345", {from: eth.accounts[0], gas: 100000});
//var modifyVars2Tx = MeetupBase.setVar2(456, {from: eth.accounts[0], gas: 100000});
//while (txpool.status.pending > 0) {
//}
// Display the transaction status
//console.log("RESULT: modifyVars1Tx=" + JSON.stringify(eth.getTransaction(modifyVars1Tx)));
//console.log("RESULT: modifyVars1TxReceipt=" + JSON.stringify(eth.getTransactionReceipt(modifyVars1Tx)));
//console.log("RESULT: modifyVars2Tx=" + JSON.stringify(eth.getTransaction(modifyVars2Tx)));
//console.log("RESULT: modifyVars2TxReceipt=" + JSON.stringify(eth.getTransactionReceipt(modifyVars2Tx)));
// Display the new values of var1 and var2
//console.log("RESULT: var1=" + MeetupBase.var1());
//console.log("RESULT: var2=" + MeetupBase.var2());
//console.log("RESULT: ");
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
// console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Register users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
//console.log("RESULT: users(0)=" + meetupBase.getUser(0));
//console.log("RESULT: users(1)=" + meetupBase.getUser(1));
meetupBase.createUser(web3.toAscii("A"), {from: eth.accounts[0], gas:4000000, gasPrice:100});
//meetupBase.createUser("B", {from: eth.accounts[1], gas:4000000, gasPrice:100});
//meetupBase.createUser("C", {from: eth.accounts[2], gas:4000000, gasPrice:100});
//meetupBase.createUser("D", {from: eth.accounts[3], gas:4000000, gasPrice:100});
//meetupBase.createUser("E", {from: eth.accounts[4], gas:4000000, gasPrice:100});
console.log("RESULT: users(0)=" + meetupBase.getUser(0));
//console.log("RESULT: users(1)=" + meetupBase.getUser(1));
//console.log("RESULT: users(2)=" + meetupBase.getUser(2));
// -----------------------------------------------------------------------------
//var checkMeetupMessage = "Check meetups";
// -----------------------------------------------------------------------------
//console.log("RESULT: --- " + checkMeetupMessage + " ---");
//console.log("RESULT: meetups.length=" + meetupBase.getMeetupCount())
// Display the values of var1 and var2
//console.log("RESULT: var1=" + meetupBase.var1());
//console.log("RESULT: var2=" + meetupBase.var2());
//console.log("RESULT: ");
// -----------------------------------------------------------------------------
var modifyVarssMessage = "Modifying Vars";
// -----------------------------------------------------------------------------
//console.log("RESULT: --- " + modifyVarssMessage + " ---");
//var modifyVars1Tx = MeetupBase.setVar1("Hello, World!4567890123456789012345", {from: eth.accounts[0], gas: 100000});
//var modifyVars2Tx = MeetupBase.setVar2(456, {from: eth.accounts[0], gas: 100000});
//while (txpool.status.pending > 0) {
//}
// Display the transaction status
//console.log("RESULT: modifyVars1Tx=" + JSON.stringify(eth.getTransaction(modifyVars1Tx)));
//console.log("RESULT: modifyVars1TxReceipt=" + JSON.stringify(eth.getTransactionReceipt(modifyVars1Tx)));
//console.log("RESULT: modifyVars2Tx=" + JSON.stringify(eth.getTransaction(modifyVars2Tx)));
//console.log("RESULT: modifyVars2TxReceipt=" + JSON.stringify(eth.getTransactionReceipt(modifyVars2Tx)));
// Display the new values of var1 and var2
//console.log("RESULT: var1=" + MeetupBase.var1());
//console.log("RESULT: var2=" + MeetupBase.var2());
//console.log("RESULT: ");
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
// console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Register users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
//console.log("RESULT: users(0)=" + meetupBase.getUser(0));
//console.log("RESULT: users(1)=" + meetupBase.getUser(1));
meetupBase.createUser(web3.fromAscii("A"), {from: eth.accounts[0], gas:4000000, gasPrice:100});
//meetupBase.createUser("B", {from: eth.accounts[1], gas:4000000, gasPrice:100});
//meetupBase.createUser("C", {from: eth.accounts[2], gas:4000000, gasPrice:100});
//meetupBase.createUser("D", {from: eth.accounts[3], gas:4000000, gasPrice:100});
//meetupBase.createUser("E", {from: eth.accounts[4], gas:4000000, gasPrice:100});
console.log("RESULT: users(0)=" + meetupBase.getUser(0));
//console.log("RESULT: users(1)=" + meetupBase.getUser(1));
//console.log("RESULT: users(2)=" + meetupBase.getUser(2));
// -----------------------------------------------------------------------------
//var checkMeetupMessage = "Check meetups";
// -----------------------------------------------------------------------------
//console.log("RESULT: --- " + checkMeetupMessage + " ---");
//console.log("RESULT: meetups.length=" + meetupBase.getMeetupCount())
// Display the values of var1 and var2
//console.log("RESULT: var1=" + meetupBase.var1());
//console.log("RESULT: var2=" + meetupBase.var2());
//console.log("RESULT: ");
// -----------------------------------------------------------------------------
var modifyVarssMessage = "Modifying Vars";
// -----------------------------------------------------------------------------
//console.log("RESULT: --- " + modifyVarssMessage + " ---");
//var modifyVars1Tx = MeetupBase.setVar1("Hello, World!4567890123456789012345", {from: eth.accounts[0], gas: 100000});
//var modifyVars2Tx = MeetupBase.setVar2(456, {from: eth.accounts[0], gas: 100000});
//while (txpool.status.pending > 0) {
//}
// Display the transaction status
//console.log("RESULT: modifyVars1Tx=" + JSON.stringify(eth.getTransaction(modifyVars1Tx)));
//console.log("RESULT: modifyVars1TxReceipt=" + JSON.stringify(eth.getTransactionReceipt(modifyVars1Tx)));
//console.log("RESULT: modifyVars2Tx=" + JSON.stringify(eth.getTransaction(modifyVars2Tx)));
//console.log("RESULT: modifyVars2TxReceipt=" + JSON.stringify(eth.getTransactionReceipt(modifyVars2Tx)));
// Display the new values of var1 and var2
//console.log("RESULT: var1=" + MeetupBase.var1());
//console.log("RESULT: var2=" + MeetupBase.var2());
//console.log("RESULT: ");
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
// console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Register users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
//console.log("RESULT: users(0)=" + meetupBase.getUser(0));
//console.log("RESULT: users(1)=" + meetupBase.getUser(1));
meetupBase.createUser(web3.fromAscii("A"), {from: eth.accounts[0], gas:400000});
//meetupBase.createUser("B", {from: eth.accounts[1], gas:4000000});
//meetupBase.createUser("C", {from: eth.accounts[2], gas:4000000});
//meetupBase.createUser("D", {from: eth.accounts[3], gas:4000000});
//meetupBase.createUser("E", {from: eth.accounts[4], gas:4000000});
console.log("RESULT: users(0)=" + meetupBase.getUser(0));
//console.log("RESULT: users(1)=" + meetupBase.getUser(1));
//console.log("RESULT: users(2)=" + meetupBase.getUser(2));
// -----------------------------------------------------------------------------
//var checkMeetupMessage = "Check meetups";
// -----------------------------------------------------------------------------
//console.log("RESULT: --- " + checkMeetupMessage + " ---");
//console.log("RESULT: meetups.length=" + meetupBase.getMeetupCount())
// Display the values of var1 and var2
//console.log("RESULT: var1=" + meetupBase.var1());
//console.log("RESULT: var2=" + meetupBase.var2());
//console.log("RESULT: ");
// -----------------------------------------------------------------------------
var modifyVarssMessage = "Modifying Vars";
// -----------------------------------------------------------------------------
//console.log("RESULT: --- " + modifyVarssMessage + " ---");
//var modifyVars1Tx = MeetupBase.setVar1("Hello, World!4567890123456789012345", {from: eth.accounts[0], gas: 100000});
//var modifyVars2Tx = MeetupBase.setVar2(456, {from: eth.accounts[0], gas: 100000});
//while (txpool.status.pending > 0) {
//}
// Display the transaction status
//console.log("RESULT: modifyVars1Tx=" + JSON.stringify(eth.getTransaction(modifyVars1Tx)));
//console.log("RESULT: modifyVars1TxReceipt=" + JSON.stringify(eth.getTransactionReceipt(modifyVars1Tx)));
//console.log("RESULT: modifyVars2Tx=" + JSON.stringify(eth.getTransaction(modifyVars2Tx)));
//console.log("RESULT: modifyVars2TxReceipt=" + JSON.stringify(eth.getTransactionReceipt(modifyVars2Tx)));
// Display the new values of var1 and var2
//console.log("RESULT: var1=" + MeetupBase.var1());
//console.log("RESULT: var2=" + MeetupBase.var2());
//console.log("RESULT: ");
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
// console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Register users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: users(0)=" + meetupBase.getUser(0));
console.log("RESULT: users(1)=" + meetupBase.getUser(1));
console.log("RESULT: users(0)=" + meetupBase.users(0));
console.log("RESULT: users(1)=" + meetupBase.users(1));
meetupBase.createUser(web3.fromAscii("A"), {from: eth.accounts[0], gas:400000});
meetupBase.createUser(web3.fromAscii("B"), {from: eth.accounts[1], gas:400000});
//meetupBase.createUser("B", {from: eth.accounts[1], gas:4000000});
//meetupBase.createUser("C", {from: eth.accounts[2], gas:4000000});
//meetupBase.createUser("D", {from: eth.accounts[3], gas:4000000});
//meetupBase.createUser("E", {from: eth.accounts[4], gas:4000000});
console.log("RESULT: users(0)=" + meetupBase.getUser(0));
console.log("RESULT: users(1)=" + meetupBase.getUser(1));
console.log("RESULT: users(0)=" + meetupBase.users(0));
console.log("RESULT: users(1)=" + meetupBase.users(1));
// -----------------------------------------------------------------------------
var checkMeetupMessage = "Check meetups";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkMeetupMessage + " ---");
console.log("RESULT: meetups.length=" + meetupBase.getMeetupCount())
// Display the values of var1 and var2
//console.log("RESULT: var1=" + meetupBase.var1());
//console.log("RESULT: var2=" + meetupBase.var2());
//console.log("RESULT: ");
// -----------------------------------------------------------------------------
var modifyVarssMessage = "Modifying Vars";
// -----------------------------------------------------------------------------
//console.log("RESULT: --- " + modifyVarssMessage + " ---");
//var modifyVars1Tx = MeetupBase.setVar1("Hello, World!4567890123456789012345", {from: eth.accounts[0], gas: 100000});
//var modifyVars2Tx = MeetupBase.setVar2(456, {from: eth.accounts[0], gas: 100000});
//while (txpool.status.pending > 0) {
//}
// Display the transaction status
//console.log("RESULT: modifyVars1Tx=" + JSON.stringify(eth.getTransaction(modifyVars1Tx)));
//console.log("RESULT: modifyVars1TxReceipt=" + JSON.stringify(eth.getTransactionReceipt(modifyVars1Tx)));
//console.log("RESULT: modifyVars2Tx=" + JSON.stringify(eth.getTransaction(modifyVars2Tx)));
//console.log("RESULT: modifyVars2TxReceipt=" + JSON.stringify(eth.getTransactionReceipt(modifyVars2Tx)));
// Display the new values of var1 and var2
//console.log("RESULT: var1=" + MeetupBase.var1());
//console.log("RESULT: var2=" + MeetupBase.var2());
//console.log("RESULT: ");
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
// console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Register users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: users(0)=" + meetupBase.getUser(0));
console.log("RESULT: users(1)=" + meetupBase.getUser(1));
console.log("RESULT: users(0)=" + meetupBase.users(0));
console.log("RESULT: users(1)=" + meetupBase.users(1));
meetupBase.createUser(web3.fromAscii("A"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(web3.fromAscii("B"), {from: eth.accounts[1], gas:700000});
//meetupBase.createUser("B", {from: eth.accounts[1], gas:4000000});
//meetupBase.createUser("C", {from: eth.accounts[2], gas:4000000});
//meetupBase.createUser("D", {from: eth.accounts[3], gas:4000000});
//meetupBase.createUser("E", {from: eth.accounts[4], gas:4000000});
console.log("RESULT: users(0)=" + meetupBase.getUser(0));
console.log("RESULT: users(1)=" + meetupBase.getUser(1));
console.log("RESULT: users(0)=" + meetupBase.users(0));
console.log("RESULT: users(1)=" + meetupBase.users(1));
// -----------------------------------------------------------------------------
var checkMeetupMessage = "Check meetups";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkMeetupMessage + " ---");
console.log("RESULT: meetups.length=" + meetupBase.getMeetupCount())
// Display the values of var1 and var2
//console.log("RESULT: var1=" + meetupBase.var1());
//console.log("RESULT: var2=" + meetupBase.var2());
//console.log("RESULT: ");
// -----------------------------------------------------------------------------
var modifyVarssMessage = "Modifying Vars";
// -----------------------------------------------------------------------------
//console.log("RESULT: --- " + modifyVarssMessage + " ---");
//var modifyVars1Tx = MeetupBase.setVar1("Hello, World!4567890123456789012345", {from: eth.accounts[0], gas: 100000});
//var modifyVars2Tx = MeetupBase.setVar2(456, {from: eth.accounts[0], gas: 100000});
//while (txpool.status.pending > 0) {
//}
// Display the transaction status
//console.log("RESULT: modifyVars1Tx=" + JSON.stringify(eth.getTransaction(modifyVars1Tx)));
//console.log("RESULT: modifyVars1TxReceipt=" + JSON.stringify(eth.getTransactionReceipt(modifyVars1Tx)));
//console.log("RESULT: modifyVars2Tx=" + JSON.stringify(eth.getTransaction(modifyVars2Tx)));
//console.log("RESULT: modifyVars2TxReceipt=" + JSON.stringify(eth.getTransactionReceipt(modifyVars2Tx)));
// Display the new values of var1 and var2
//console.log("RESULT: var1=" + MeetupBase.var1());
//console.log("RESULT: var2=" + MeetupBase.var2());
//console.log("RESULT: ");
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
// console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Register users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: users(0)=" + meetupBase.getUser(0));
console.log("RESULT: users(1)=" + meetupBase.getUser(1));
console.log("RESULT: users(0)=" + meetupBase.users(0));
console.log("RESULT: users(1)=" + meetupBase.users(1));
meetupBase.createUser(web3.fromAscii("A"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(web3.fromAscii("B"), {from: eth.accounts[1], gas:700000});
//meetupBase.createUser("B", {from: eth.accounts[1], gas:4000000});
//meetupBase.createUser("C", {from: eth.accounts[2], gas:4000000});
//meetupBase.createUser("D", {from: eth.accounts[3], gas:4000000});
//meetupBase.createUser("E", {from: eth.accounts[4], gas:4000000});
console.log("RESULT: users(0)=" + meetupBase.getUser(0));
console.log("RESULT: users(1)=" + meetupBase.getUser(1));
console.log("RESULT: users(0)=" + meetupBase.users(0));
console.log("RESULT: users(1)=" + meetupBase.users(1));
// -----------------------------------------------------------------------------
var checkMeetupMessage = "Check meetups";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkMeetupMessage + " ---");
console.log("RESULT: meetups.length=" + meetupBase.getMeetupCount())
// Display the values of var1 and var2
//console.log("RESULT: var1=" + meetupBase.var1());
//console.log("RESULT: var2=" + meetupBase.var2());
//console.log("RESULT: ");
// -----------------------------------------------------------------------------
var modifyVarssMessage = "Modifying Vars";
// -----------------------------------------------------------------------------
//console.log("RESULT: --- " + modifyVarssMessage + " ---");
//var modifyVars1Tx = MeetupBase.setVar1("Hello, World!4567890123456789012345", {from: eth.accounts[0], gas: 100000});
//var modifyVars2Tx = MeetupBase.setVar2(456, {from: eth.accounts[0], gas: 100000});
//while (txpool.status.pending > 0) {
//}
// Display the transaction status
//console.log("RESULT: modifyVars1Tx=" + JSON.stringify(eth.getTransaction(modifyVars1Tx)));
//console.log("RESULT: modifyVars1TxReceipt=" + JSON.stringify(eth.getTransactionReceipt(modifyVars1Tx)));
//console.log("RESULT: modifyVars2Tx=" + JSON.stringify(eth.getTransaction(modifyVars2Tx)));
//console.log("RESULT: modifyVars2TxReceipt=" + JSON.stringify(eth.getTransactionReceipt(modifyVars2Tx)));
// Display the new values of var1 and var2
//console.log("RESULT: var1=" + MeetupBase.var1());
//console.log("RESULT: var2=" + MeetupBase.var2());
//console.log("RESULT: ");
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
// console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Register users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: users(0)=" + meetupBase.getUser(0));
console.log("RESULT: users(1)=" + meetupBase.getUser(1));
console.log("RESULT: users(0)=" + meetupBase.users(0));
console.log("RESULT: users(1)=" + meetupBase.users(1));
meetupBase.createUser(web3.fromAscii("A"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("B"), {from: eth.accounts[1], gas:700000});
while (txpool.status.pending > 0) {
}
//meetupBase.createUser("B", {from: eth.accounts[1], gas:4000000});
//meetupBase.createUser("C", {from: eth.accounts[2], gas:4000000});
//meetupBase.createUser("D", {from: eth.accounts[3], gas:4000000});
//meetupBase.createUser("E", {from: eth.accounts[4], gas:4000000});
console.log("RESULT: users(0)=" + meetupBase.getUser(0));
console.log("RESULT: users(1)=" + meetupBase.getUser(1));
while (txpool.status.pending > 0) {
}
console.log("RESULT: users(0)=" + meetupBase.users(0));
console.log("RESULT: users(1)=" + meetupBase.users(1));
// -----------------------------------------------------------------------------
var checkMeetupMessage = "Check meetups";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkMeetupMessage + " ---");
console.log("RESULT: meetups.length=" + meetupBase.getMeetupCount())
// Display the values of var1 and var2
//console.log("RESULT: var1=" + meetupBase.var1());
//console.log("RESULT: var2=" + meetupBase.var2());
//console.log("RESULT: ");
// -----------------------------------------------------------------------------
var modifyVarssMessage = "Modifying Vars";
// -----------------------------------------------------------------------------
//console.log("RESULT: --- " + modifyVarssMessage + " ---");
//var modifyVars1Tx = MeetupBase.setVar1("Hello, World!4567890123456789012345", {from: eth.accounts[0], gas: 100000});
//var modifyVars2Tx = MeetupBase.setVar2(456, {from: eth.accounts[0], gas: 100000});
//while (txpool.status.pending > 0) {
//}
// Display the transaction status
//console.log("RESULT: modifyVars1Tx=" + JSON.stringify(eth.getTransaction(modifyVars1Tx)));
//console.log("RESULT: modifyVars1TxReceipt=" + JSON.stringify(eth.getTransactionReceipt(modifyVars1Tx)));
//console.log("RESULT: modifyVars2Tx=" + JSON.stringify(eth.getTransaction(modifyVars2Tx)));
//console.log("RESULT: modifyVars2TxReceipt=" + JSON.stringify(eth.getTransactionReceipt(modifyVars2Tx)));
// Display the new values of var1 and var2
//console.log("RESULT: var1=" + MeetupBase.var1());
//console.log("RESULT: var2=" + MeetupBase.var2());
//console.log("RESULT: ");
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
// console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Register users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: users(0)=" + meetupBase.getUser(0));
console.log("RESULT: users(1)=" + meetupBase.getUser(1));
console.log("RESULT: users(0)=" + meetupBase.users(0));
console.log("RESULT: users(1)=" + meetupBase.users(1));
meetupBase.createUser(web3.fromAscii("A"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(web3.fromAscii("B"), {from: eth.accounts[1], gas:700000});
while (txpool.status.pending > 0) {
}
//meetupBase.createUser("B", {from: eth.accounts[1], gas:4000000});
//meetupBase.createUser("C", {from: eth.accounts[2], gas:4000000});
//meetupBase.createUser("D", {from: eth.accounts[3], gas:4000000});
//meetupBase.createUser("E", {from: eth.accounts[4], gas:4000000});
console.log("RESULT: users(0)=" + meetupBase.getUser(0));
console.log("RESULT: users(1)=" + meetupBase.getUser(1));
console.log("RESULT: users(0)=" + meetupBase.users(0));
console.log("RESULT: users(1)=" + meetupBase.users(1));
// -----------------------------------------------------------------------------
var checkMeetupMessage = "Check meetups";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkMeetupMessage + " ---");
console.log("RESULT: meetups.length=" + meetupBase.getMeetupCount())
// Display the values of var1 and var2
//console.log("RESULT: var1=" + meetupBase.var1());
//console.log("RESULT: var2=" + meetupBase.var2());
//console.log("RESULT: ");
// -----------------------------------------------------------------------------
var modifyVarssMessage = "Modifying Vars";
// -----------------------------------------------------------------------------
//console.log("RESULT: --- " + modifyVarssMessage + " ---");
//var modifyVars1Tx = MeetupBase.setVar1("Hello, World!4567890123456789012345", {from: eth.accounts[0], gas: 100000});
//var modifyVars2Tx = MeetupBase.setVar2(456, {from: eth.accounts[0], gas: 100000});
//while (txpool.status.pending > 0) {
//}
// Display the transaction status
//console.log("RESULT: modifyVars1Tx=" + JSON.stringify(eth.getTransaction(modifyVars1Tx)));
//console.log("RESULT: modifyVars1TxReceipt=" + JSON.stringify(eth.getTransactionReceipt(modifyVars1Tx)));
//console.log("RESULT: modifyVars2Tx=" + JSON.stringify(eth.getTransaction(modifyVars2Tx)));
//console.log("RESULT: modifyVars2TxReceipt=" + JSON.stringify(eth.getTransactionReceipt(modifyVars2Tx)));
// Display the new values of var1 and var2
//console.log("RESULT: var1=" + MeetupBase.var1());
//console.log("RESULT: var2=" + MeetupBase.var2());
//console.log("RESULT: ");
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
// console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Register users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: users(0)=" + meetupBase.getUser(0));
console.log("RESULT: users(1)=" + meetupBase.getUser(1));
console.log("RESULT: users(0)=" + meetupBase.users(0));
console.log("RESULT: users(1)=" + meetupBase.users(1));
meetupBase.createUser(web3.fromAscii("A"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(web3.fromAscii("B"), {from: eth.accounts[1], gas:700000});
while (txpool.status.pending > 0) {
}
//meetupBase.createUser("B", {from: eth.accounts[1], gas:4000000});
//meetupBase.createUser("C", {from: eth.accounts[2], gas:4000000});
//meetupBase.createUser("D", {from: eth.accounts[3], gas:4000000});
//meetupBase.createUser("E", {from: eth.accounts[4], gas:4000000});
console.log("RESULT: users(0)=" + meetupBase.getUser(0));
console.log("RESULT: users(1)=" + meetupBase.getUser(1));
console.log("RESULT: users(0)=" + meetupBase.users(0));
console.log("RESULT: users(1)=" + meetupBase.users(1));
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Tue, 08 May 2018 22:38:42 AEST";
strToTimestamp(dateTimeStr);
for (i = 0; i < 5; i++) { 
  console.log(i)
  console.log("RESULT: Name: "+web3.toAscii(meetupbase.users(i)[2])+
            " Creation time: " + timestampToStr(meetupbase.users(i)[0])  +
            " Address: " + meetupbase.users(i)[1])
}
// -----------------------------------------------------------------------------
var checkMeetupMessage = "Check meetups";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkMeetupMessage + " ---");
console.log("RESULT: meetups.length=" + meetupBase.getMeetupCount())
// Display the values of var1 and var2
//console.log("RESULT: var1=" + meetupBase.var1());
//console.log("RESULT: var2=" + meetupBase.var2());
//console.log("RESULT: ");
// -----------------------------------------------------------------------------
var modifyVarssMessage = "Modifying Vars";
// -----------------------------------------------------------------------------
//console.log("RESULT: --- " + modifyVarssMessage + " ---");
//var modifyVars1Tx = MeetupBase.setVar1("Hello, World!4567890123456789012345", {from: eth.accounts[0], gas: 100000});
//var modifyVars2Tx = MeetupBase.setVar2(456, {from: eth.accounts[0], gas: 100000});
//while (txpool.status.pending > 0) {
//}
// Display the transaction status
//console.log("RESULT: modifyVars1Tx=" + JSON.stringify(eth.getTransaction(modifyVars1Tx)));
//console.log("RESULT: modifyVars1TxReceipt=" + JSON.stringify(eth.getTransactionReceipt(modifyVars1Tx)));
//console.log("RESULT: modifyVars2Tx=" + JSON.stringify(eth.getTransaction(modifyVars2Tx)));
//console.log("RESULT: modifyVars2TxReceipt=" + JSON.stringify(eth.getTransactionReceipt(modifyVars2Tx)));
// Display the new values of var1 and var2
//console.log("RESULT: var1=" + MeetupBase.var1());
//console.log("RESULT: var2=" + MeetupBase.var2());
//console.log("RESULT: ");
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
// console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Register users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: users(0)=" + meetupBase.users(0));
console.log("RESULT: users(1)=" + meetupBase.users(1));
meetupBase.createUser(web3.fromAscii("A"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(web3.fromAscii("B"), {from: eth.accounts[1], gas:700000});
while (txpool.status.pending > 0) {
}
//meetupBase.createUser("B", {from: eth.accounts[1], gas:4000000});
//meetupBase.createUser("C", {from: eth.accounts[2], gas:4000000});
//meetupBase.createUser("D", {from: eth.accounts[3], gas:4000000});
//meetupBase.createUser("E", {from: eth.accounts[4], gas:4000000});
console.log("RESULT: users(0)=" + meetupBase.getUser(0));
console.log("RESULT: users(1)=" + meetupBase.getUser(1));
console.log("RESULT: users(0)=" + meetupBase.users(0));
console.log("RESULT: users(1)=" + meetupBase.users(1));
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Tue, 08 May 2018 22:38:42 AEST";
strToTimestamp(dateTimeStr);
for (i = 0; i < 5; i++) { 
  console.log(i);
  console.log("RESULT: Name: "+web3.toAscii(meetupBase.users(i)[2])+
            " Creation time: " + timestampToStr(meetupBase.users(i)[0])  +
            " Address: " + meetupBase.users(i)[1]);
}
// -----------------------------------------------------------------------------
var checkMeetupMessage = "Check meetups";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkMeetupMessage + " ---");
console.log("RESULT: meetups.length=" + meetupBase.getMeetupCount())
// Display the values of var1 and var2
//console.log("RESULT: var1=" + meetupBase.var1());
//console.log("RESULT: var2=" + meetupBase.var2());
//console.log("RESULT: ");
// -----------------------------------------------------------------------------
var modifyVarssMessage = "Modifying Vars";
// -----------------------------------------------------------------------------
//console.log("RESULT: --- " + modifyVarssMessage + " ---");
//var modifyVars1Tx = MeetupBase.setVar1("Hello, World!4567890123456789012345", {from: eth.accounts[0], gas: 100000});
//var modifyVars2Tx = MeetupBase.setVar2(456, {from: eth.accounts[0], gas: 100000});
//while (txpool.status.pending > 0) {
//}
// Display the transaction status
//console.log("RESULT: modifyVars1Tx=" + JSON.stringify(eth.getTransaction(modifyVars1Tx)));
//console.log("RESULT: modifyVars1TxReceipt=" + JSON.stringify(eth.getTransactionReceipt(modifyVars1Tx)));
//console.log("RESULT: modifyVars2Tx=" + JSON.stringify(eth.getTransaction(modifyVars2Tx)));
//console.log("RESULT: modifyVars2TxReceipt=" + JSON.stringify(eth.getTransactionReceipt(modifyVars2Tx)));
// Display the new values of var1 and var2
//console.log("RESULT: var1=" + MeetupBase.var1());
//console.log("RESULT: var2=" + MeetupBase.var2());
//console.log("RESULT: ");
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
// console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
//console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Register users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: users(0)=" + meetupBase.users(0));
console.log("RESULT: users(1)=" + meetupBase.users(1));
meetupBase.createUser(web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(web3.fromAscii("Assistant"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(web3.fromAscii("Member1"), {from: eth.accounts[2], gas:700000});
meetupBase.createUser(web3.fromAscii("Member2"), {from: eth.accounts[3], gas:700000});
meetupBase.createUser(web3.fromAscii("Member3"), {from: eth.accounts[4], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: users(0)=" + meetupBase.getUser(0));
console.log("RESULT: users(0)=" + meetupBase.users(0));
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Sun, 01 Dec 2019 18:00:00 AEST";
strToTimestamp(dateTimeStr);
for (i = 0; i < 5; i++) { 
  console.log(i);
  console.log("RESULT: Name: "+web3.toAscii(meetupBase.users(i)[2])+
            " Creation time: " + timestampToStr(meetupBase.users(i)[0])  +
            " Address: " + meetupBase.users(i)[1]);
}
// -----------------------------------------------------------------------------
var checkMeetupMessage = "Check meetups";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkMeetupMessage + " ---");
console.log("RESULT: meetups.length=" + meetupBase.getMeetupCount())
// Display the values of var1 and var2
//console.log("RESULT: var1=" + meetupBase.var1());
//console.log("RESULT: var2=" + meetupBase.var2());
//console.log("RESULT: ");
// -----------------------------------------------------------------------------
var modifyVarssMessage = "Modifying Vars";
// -----------------------------------------------------------------------------
//console.log("RESULT: --- " + modifyVarssMessage + " ---");
//var modifyVars1Tx = MeetupBase.setVar1("Hello, World!4567890123456789012345", {from: eth.accounts[0], gas: 100000});
//var modifyVars2Tx = MeetupBase.setVar2(456, {from: eth.accounts[0], gas: 100000});
//while (txpool.status.pending > 0) {
//}
// Display the transaction status
//console.log("RESULT: modifyVars1Tx=" + JSON.stringify(eth.getTransaction(modifyVars1Tx)));
//console.log("RESULT: modifyVars1TxReceipt=" + JSON.stringify(eth.getTransactionReceipt(modifyVars1Tx)));
//console.log("RESULT: modifyVars2Tx=" + JSON.stringify(eth.getTransaction(modifyVars2Tx)));
//console.log("RESULT: modifyVars2TxReceipt=" + JSON.stringify(eth.getTransactionReceipt(modifyVars2Tx)));
// Display the new values of var1 and var2
//console.log("RESULT: var1=" + MeetupBase.var1());
//console.log("RESULT: var2=" + MeetupBase.var2());
//console.log("RESULT: ");
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
// console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
//console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Register users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: users(0)=" + meetupBase.users(0));
console.log("RESULT: users(1)=" + meetupBase.users(1));
meetupBase.createUser(web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(web3.fromAscii("Assistant"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(web3.fromAscii("Member1"), {from: eth.accounts[2], gas:700000});
meetupBase.createUser(web3.fromAscii("Member2"), {from: eth.accounts[3], gas:700000});
meetupBase.createUser(web3.fromAscii("Member3"), {from: eth.accounts[4], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: users(0)=" + meetupBase.getUser(0));
console.log("RESULT: users(0)=" + meetupBase.users(0));
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Sun, 01 Dec 2019 18:00:00 AEST";
strToTimestamp(dateTimeStr);
for (i = 0; i < 5; i++) {   
  console.log("RESULT: " + i + "Name: "+web3.toAscii(meetupBase.users(i)[2])+
            " Creation Time: " + timestampToStr(meetupBase.users(i)[0])  +
            " Address: " + meetupBase.users(i)[1]);
}
// -----------------------------------------------------------------------------
var checkMeetupMessage = "Check meetups";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkMeetupMessage + " ---");
console.log("RESULT: meetups.length=" + meetupBase.getMeetupCount())
// Display the values of var1 and var2
//console.log("RESULT: var1=" + meetupBase.var1());
//console.log("RESULT: var2=" + meetupBase.var2());
//console.log("RESULT: ");
// -----------------------------------------------------------------------------
var modifyVarssMessage = "Modifying Vars";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + modifyVarssMessage + " ---");
//var modifyVars1Tx = MeetupBase.setVar1("Hello, World!4567890123456789012345", {from: eth.accounts[0], gas: 100000});
//var modifyVars2Tx = MeetupBase.setVar2(456, {from: eth.accounts[0], gas: 100000});
//while (txpool.status.pending > 0) {
//}
// Display the transaction status
//console.log("RESULT: modifyVars1Tx=" + JSON.stringify(eth.getTransaction(modifyVars1Tx)));
//console.log("RESULT: modifyVars1TxReceipt=" + JSON.stringify(eth.getTransactionReceipt(modifyVars1Tx)));
//console.log("RESULT: modifyVars2Tx=" + JSON.stringify(eth.getTransaction(modifyVars2Tx)));
//console.log("RESULT: modifyVars2TxReceipt=" + JSON.stringify(eth.getTransactionReceipt(modifyVars2Tx)));
// Display the new values of var1 and var2
//console.log("RESULT: var1=" + MeetupBase.var1());
//console.log("RESULT: var2=" + MeetupBase.var2());
//console.log("RESULT: ");
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
while (txpool.status.pending > 0) {
}
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Register users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: users(0)=" + meetupBase.users(0));
console.log("RESULT: users(1)=" + meetupBase.users(1));
meetupBase.createUser(web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(web3.fromAscii("Assistant"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(web3.fromAscii("Member1"), {from: eth.accounts[2], gas:700000});
meetupBase.createUser(web3.fromAscii("Member2"), {from: eth.accounts[3], gas:700000});
meetupBase.createUser(web3.fromAscii("Member3"), {from: eth.accounts[4], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: users(0)=" + meetupBase.getUser(0));
console.log("RESULT: users(0)=" + meetupBase.users(0));
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Sun, 01 Dec 2019 18:00:00 AEST";
strToTimestamp(dateTimeStr);
for (i = 0; i < 5; i++) {   
  console.log("RESULT: " + i + "Name: "+web3.toAscii(meetupBase.users(i)[2])+
            " Creation Time: " + timestampToStr(meetupBase.users(i)[0])  +
            " Address: " + meetupBase.users(i)[1]);
}
// -----------------------------------------------------------------------------
var checkMeetupMessage = "Check meetups";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkMeetupMessage + " ---");
console.log("RESULT: meetups.length=" + meetupBase.getMeetupCount())
// Display the values of var1 and var2
//console.log("RESULT: var1=" + meetupBase.var1());
//console.log("RESULT: var2=" + meetupBase.var2());
//console.log("RESULT: ");
// -----------------------------------------------------------------------------
var modifyVarssMessage = "Modifying Vars";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + modifyVarssMessage + " ---");
//var modifyVars1Tx = MeetupBase.setVar1("Hello, World!4567890123456789012345", {from: eth.accounts[0], gas: 100000});
//var modifyVars2Tx = MeetupBase.setVar2(456, {from: eth.accounts[0], gas: 100000});
//while (txpool.status.pending > 0) {
//}
// Display the transaction status
//console.log("RESULT: modifyVars1Tx=" + JSON.stringify(eth.getTransaction(modifyVars1Tx)));
//console.log("RESULT: modifyVars1TxReceipt=" + JSON.stringify(eth.getTransactionReceipt(modifyVars1Tx)));
//console.log("RESULT: modifyVars2Tx=" + JSON.stringify(eth.getTransaction(modifyVars2Tx)));
//console.log("RESULT: modifyVars2TxReceipt=" + JSON.stringify(eth.getTransactionReceipt(modifyVars2Tx)));
// Display the new values of var1 and var2
//console.log("RESULT: var1=" + MeetupBase.var1());
//console.log("RESULT: var2=" + MeetupBase.var2());
//console.log("RESULT: ");
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
while (txpool.status.pending > 0) {
}
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Register users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: users(0)=" + meetupBase.users(0));
console.log("RESULT: users(1)=" + meetupBase.users(1));
meetupBase.createUser(web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(web3.fromAscii("Assistant"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(web3.fromAscii("Member1"), {from: eth.accounts[2], gas:700000});
meetupBase.createUser(web3.fromAscii("Member2"), {from: eth.accounts[3], gas:700000});
meetupBase.createUser(web3.fromAscii("Member3"), {from: eth.accounts[4], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: users(0)=" + meetupBase.getUser(0));
console.log("RESULT: users(0)=" + meetupBase.users(0));
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Sun, 01 Dec 2019 18:00:00 AEST";
strToTimestamp(dateTimeStr);
for (i = 0; i < 5; i++) {   
  console.log("RESULT: " + i + " Name: "+web3.toAscii(meetupBase.users(i)[2])+
            " Creation Time: " + timestampToStr(meetupBase.users(i)[0])  +
            " Address: " + meetupBase.users(i)[1]);
}
// -----------------------------------------------------------------------------
var checkMeetupMessage = "Check meetups";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkMeetupMessage + " ---");
console.log("RESULT: meetups.length=" + meetupBase.getMeetupCount())
// Display the values of var1 and var2
//console.log("RESULT: var1=" + meetupBase.var1());
//console.log("RESULT: var2=" + meetupBase.var2());
//console.log("RESULT: ");
// -----------------------------------------------------------------------------
var modifyVarssMessage = "Modifying Vars";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + modifyVarssMessage + " ---");
//var modifyVars1Tx = MeetupBase.setVar1("Hello, World!4567890123456789012345", {from: eth.accounts[0], gas: 100000});
//var modifyVars2Tx = MeetupBase.setVar2(456, {from: eth.accounts[0], gas: 100000});
//while (txpool.status.pending > 0) {
//}
// Display the transaction status
//console.log("RESULT: modifyVars1Tx=" + JSON.stringify(eth.getTransaction(modifyVars1Tx)));
//console.log("RESULT: modifyVars1TxReceipt=" + JSON.stringify(eth.getTransactionReceipt(modifyVars1Tx)));
//console.log("RESULT: modifyVars2Tx=" + JSON.stringify(eth.getTransaction(modifyVars2Tx)));
//console.log("RESULT: modifyVars2TxReceipt=" + JSON.stringify(eth.getTransactionReceipt(modifyVars2Tx)));
// Display the new values of var1 and var2
//console.log("RESULT: var1=" + MeetupBase.var1());
//console.log("RESULT: var2=" + MeetupBase.var2());
//console.log("RESULT: ");
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
while (txpool.status.pending > 0) {
}
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Register users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: users(0)=" + meetupBase.users(0));
console.log("RESULT: users(1)=" + meetupBase.users(1));
meetupBase.createUser(web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(web3.fromAscii("Assistant"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(web3.fromAscii("Member1"), {from: eth.accounts[2], gas:700000});
meetupBase.createUser(web3.fromAscii("Member2"), {from: eth.accounts[3], gas:700000});
meetupBase.createUser(web3.fromAscii("Member3"), {from: eth.accounts[4], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: users(0)=" + meetupBase.getUser(0));
console.log("RESULT: users(0)=" + meetupBase.users(1));
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Sun, 01 Dec 2019 18:00:00 AEST";
strToTimestamp(dateTimeStr);
for (i = 0; i < 5; i++) {   
  console.log("RESULT: " + i + " Name: "+web3.toAscii(meetupBase.users(i)[2])+
            " Creation Time: " + timestampToStr(meetupBase.users(i)[0])  +
            " Address: " + meetupBase.users(i)[1]);
}
// -----------------------------------------------------------------------------
var checkMeetupMessage = "Check meetups";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkMeetupMessage + " ---");
console.log("RESULT: meetups.length=" + meetupBase.getMeetupCount());
// Display the values of var1 and var2
console.log("RESULT: var1=");
//console.log("RESULT: var1=" + meetupBase.var1());
//console.log("RESULT: var2=" + meetupBase.var2());
//console.log("RESULT: ");
// -----------------------------------------------------------------------------
var modifyVarssMessage = "Modifying Vars";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + modifyVarssMessage + " ---");
//var modifyVars1Tx = MeetupBase.setVar1("Hello, World!4567890123456789012345", {from: eth.accounts[0], gas: 100000});
//var modifyVars2Tx = MeetupBase.setVar2(456, {from: eth.accounts[0], gas: 100000});
//while (txpool.status.pending > 0) {
//}
// Display the transaction status
//console.log("RESULT: modifyVars1Tx=" + JSON.stringify(eth.getTransaction(modifyVars1Tx)));
//console.log("RESULT: modifyVars1TxReceipt=" + JSON.stringify(eth.getTransactionReceipt(modifyVars1Tx)));
//console.log("RESULT: modifyVars2Tx=" + JSON.stringify(eth.getTransaction(modifyVars2Tx)));
//console.log("RESULT: modifyVars2TxReceipt=" + JSON.stringify(eth.getTransactionReceipt(modifyVars2Tx)));
// Display the new values of var1 and var2
//console.log("RESULT: var1=" + MeetupBase.var1());
//console.log("RESULT: var2=" + MeetupBase.var2());
//console.log("RESULT: ");
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
while (txpool.status.pending > 0) {
}
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Register users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: users(0)=" + meetupBase.users(0));
console.log("RESULT: users(1)=" + meetupBase.users(1));
meetupBase.createUser(web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(web3.fromAscii("Assistant"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(web3.fromAscii("Member1"), {from: eth.accounts[2], gas:700000});
meetupBase.createUser(web3.fromAscii("Member2"), {from: eth.accounts[3], gas:700000});
meetupBase.createUser(web3.fromAscii("Member3"), {from: eth.accounts[4], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: users(0)=" + meetupBase.getUser(0));
console.log("RESULT: users(0)=" + meetupBase.users(1));
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Sun, 01 Dec 2019 18:00:00 AEST";
strToTimestamp(dateTimeStr);
for (i = 0; i < 5; i++) {   
  console.log("RESULT: " + i + " Name: "+web3.toAscii(meetupBase.users(i)[2])+
            " Creation Time: " + timestampToStr(meetupBase.users(i)[0])  +
            " Address: " + meetupBase.users(i)[1]);
}
// -----------------------------------------------------------------------------
var checkMeetupMessage = "Check meetups";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkMeetupMessage + " ---");
console.log("RESULT: meetups.length=" + meetupBase.getMeetupCount());
// Display the values of var1 and var2
console.log("RESULT: var1=");
//console.log("RESULT: var1=" + meetupBase.var1());
//console.log("RESULT: var2=" + meetupBase.var2());
//console.log("RESULT: ");
// -----------------------------------------------------------------------------
var modifyVarssMessage = "Modifying Vars";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + modifyVarssMessage + " ---");
//var modifyVars1Tx = MeetupBase.setVar1("Hello, World!4567890123456789012345", {from: eth.accounts[0], gas: 100000});
//var modifyVars2Tx = MeetupBase.setVar2(456, {from: eth.accounts[0], gas: 100000});
//while (txpool.status.pending > 0) {
//}
// Display the transaction status
//console.log("RESULT: modifyVars1Tx=" + JSON.stringify(eth.getTransaction(modifyVars1Tx)));
//console.log("RESULT: modifyVars1TxReceipt=" + JSON.stringify(eth.getTransactionReceipt(modifyVars1Tx)));
//console.log("RESULT: modifyVars2Tx=" + JSON.stringify(eth.getTransaction(modifyVars2Tx)));
//console.log("RESULT: modifyVars2TxReceipt=" + JSON.stringify(eth.getTransactionReceipt(modifyVars2Tx)));
// Display the new values of var1 and var2
//console.log("RESULT: var1=" + MeetupBase.var1());
//console.log("RESULT: var2=" + MeetupBase.var2());
//console.log("RESULT: ");
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
while (txpool.status.pending > 0) {
}
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Register users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: users(0)=" + meetupBase.users(0));
console.log("RESULT: users(1)=" + meetupBase.users(1));
meetupBase.createUser(web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(web3.fromAscii("Assistant"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(web3.fromAscii("Member1"), {from: eth.accounts[2], gas:700000});
meetupBase.createUser(web3.fromAscii("Member2"), {from: eth.accounts[3], gas:700000});
meetupBase.createUser(web3.fromAscii("Member3"), {from: eth.accounts[4], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: users(0)=" + meetupBase.getUser(0));
console.log("RESULT: users(1)=" + meetupBase.users(1));
//date = 1525696722;
//timestampToStr(date);
//dateTimeStr = "Sun, 01 Dec 2019 18:00:00 AEST";
//strToTimestamp(dateTimeStr);
for (i = 0; i < 5; i++) {   
  console.log("RESULT: " + i + " Name: "+web3.toAscii(meetupBase.users(i)[2])+
            " Creation Time: " + timestampToStr(meetupBase.users(i)[0])  +
            " Address: " + meetupBase.users(i)[1]);
}
// -----------------------------------------------------------------------------
var checkMeetupMessage = "Check meetups";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkMeetupMessage + " ---");
console.log("RESULT: meetups.length=" + meetupBase.getMeetupCount());
// Display the values of var1 and var2
console.log("RESULT: var1=");
//console.log("RESULT: var1=" + meetupBase.var1());
//console.log("RESULT: var2=" + meetupBase.var2());
//console.log("RESULT: ");
// -----------------------------------------------------------------------------
var modifyVarssMessage = "Modifying Vars";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + modifyVarssMessage + " ---");
//var modifyVars1Tx = MeetupBase.setVar1("Hello, World!4567890123456789012345", {from: eth.accounts[0], gas: 100000});
//var modifyVars2Tx = MeetupBase.setVar2(456, {from: eth.accounts[0], gas: 100000});
//while (txpool.status.pending > 0) {
//}
// Display the transaction status
//console.log("RESULT: modifyVars1Tx=" + JSON.stringify(eth.getTransaction(modifyVars1Tx)));
//console.log("RESULT: modifyVars1TxReceipt=" + JSON.stringify(eth.getTransactionReceipt(modifyVars1Tx)));
//console.log("RESULT: modifyVars2Tx=" + JSON.stringify(eth.getTransaction(modifyVars2Tx)));
//console.log("RESULT: modifyVars2TxReceipt=" + JSON.stringify(eth.getTransactionReceipt(modifyVars2Tx)));
// Display the new values of var1 and var2
//console.log("RESULT: var1=" + MeetupBase.var1());
//console.log("RESULT: var2=" + MeetupBase.var2());
//console.log("RESULT: ");
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
while (txpool.status.pending > 0) {
}
//geth --datadir ./testchain attach << EOF
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Register users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: users(0)=" + meetupBase.users(0));
console.log("RESULT: users(1)=" + meetupBase.users(1));
meetupBase.createUser(web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(web3.fromAscii("Assistant"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(web3.fromAscii("Member1"), {from: eth.accounts[2], gas:700000});
meetupBase.createUser(web3.fromAscii("Member2"), {from: eth.accounts[3], gas:700000});
meetupBase.createUser(web3.fromAscii("Member3"), {from: eth.accounts[4], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: users(0)=" + meetupBase.getUser(0));
console.log("RESULT: users(1)=" + meetupBase.users(1));
//date = 1525696722;
//timestampToStr(date);
//dateTimeStr = "Sun, 01 Dec 2019 18:00:00 AEST";
//strToTimestamp(dateTimeStr);
for (i = 0; i < 5; i++) {   
  console.log("RESULT: " + i + " Name: "+web3.toAscii(meetupBase.users(i)[2])+
            " Creation Time: " + timestampToStr(meetupBase.users(i)[0])  +
            " Address: " + meetupBase.users(i)[1]);
}
// -----------------------------------------------------------------------------
var checkMeetupMessage = "Check meetups";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkMeetupMessage + " ---");
console.log("RESULT: meetups.length=" + meetupBase.getMeetupCount());
// Display the values of var1 and var2
console.log("RESULT: var1=");
//console.log("RESULT: var1=" + meetupBase.var1());
//console.log("RESULT: var2=" + meetupBase.var2());
//console.log("RESULT: ");
// -----------------------------------------------------------------------------
var modifyVarssMessage = "Modifying Vars";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + modifyVarssMessage + " ---");
//var modifyVars1Tx = MeetupBase.setVar1("Hello, World!4567890123456789012345", {from: eth.accounts[0], gas: 100000});
//var modifyVars2Tx = MeetupBase.setVar2(456, {from: eth.accounts[0], gas: 100000});
//while (txpool.status.pending > 0) {
//}
// Display the transaction status
//console.log("RESULT: modifyVars1Tx=" + JSON.stringify(eth.getTransaction(modifyVars1Tx)));
//console.log("RESULT: modifyVars1TxReceipt=" + JSON.stringify(eth.getTransactionReceipt(modifyVars1Tx)));
//console.log("RESULT: modifyVars2Tx=" + JSON.stringify(eth.getTransaction(modifyVars2Tx)));
//console.log("RESULT: modifyVars2TxReceipt=" + JSON.stringify(eth.getTransactionReceipt(modifyVars2Tx)));
// Display the new values of var1 and var2
//console.log("RESULT: var1=" + MeetupBase.var1());
//console.log("RESULT: var2=" + MeetupBase.var2());
//console.log("RESULT: ");
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
while (txpool.status.pending > 0) {
}
//geth --datadir ./testchain attach << EOF
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Register users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: users(0)=" + meetupBase.users(0));
console.log("RESULT: users(1)=" + meetupBase.users(1));
meetupBase.createUser(web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Assistant"), {from: eth.accounts[1], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member1"), {from: eth.accounts[2], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member2"), {from: eth.accounts[3], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member3"), {from: eth.accounts[4], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: users(0)=" + meetupBase.getUser(0));
console.log("RESULT: users(1)=" + meetupBase.users(1));
//date = 1525696722;
//timestampToStr(date);
//dateTimeStr = "Sun, 01 Dec 2019 18:00:00 AEST";
//strToTimestamp(dateTimeStr);
for (i = 0; i < 5; i++) {   
  console.log("RESULT: " + i + " Name: "+web3.toAscii(meetupBase.users(i)[2])+
            " Creation Time: " + timestampToStr(meetupBase.users(i)[0])  +
            " Address: " + meetupBase.users(i)[1]);
}
// -----------------------------------------------------------------------------
var checkMeetupMessage = "Check meetups";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkMeetupMessage + " ---");
console.log("RESULT: meetups.length=" + meetupBase.getMeetupCount());
// Display the values of var1 and var2
console.log("RESULT: var1=");
//console.log("RESULT: var1=" + meetupBase.var1());
//console.log("RESULT: var2=" + meetupBase.var2());
//console.log("RESULT: ");
// -----------------------------------------------------------------------------
var modifyVarssMessage = "Modifying Vars";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + modifyVarssMessage + " ---");
//var modifyVars1Tx = MeetupBase.setVar1("Hello, World!4567890123456789012345", {from: eth.accounts[0], gas: 100000});
//var modifyVars2Tx = MeetupBase.setVar2(456, {from: eth.accounts[0], gas: 100000});
//while (txpool.status.pending > 0) {
//}
// Display the transaction status
//console.log("RESULT: modifyVars1Tx=" + JSON.stringify(eth.getTransaction(modifyVars1Tx)));
//console.log("RESULT: modifyVars1TxReceipt=" + JSON.stringify(eth.getTransactionReceipt(modifyVars1Tx)));
//console.log("RESULT: modifyVars2Tx=" + JSON.stringify(eth.getTransaction(modifyVars2Tx)));
//console.log("RESULT: modifyVars2TxReceipt=" + JSON.stringify(eth.getTransactionReceipt(modifyVars2Tx)));
// Display the new values of var1 and var2
//console.log("RESULT: var1=" + MeetupBase.var1());
//console.log("RESULT: var2=" + MeetupBase.var2());
//console.log("RESULT: ");
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
//geth --datadir ./testchain attach << EOF
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Register users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
//console.log("RESULT: users(0)=" + meetupBase.users(0));
//console.log("RESULT: users(1)=" + meetupBase.users(1));
meetupBase.createUser(web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Assistant"), {from: eth.accounts[1], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member1"), {from: eth.accounts[2], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member2"), {from: eth.accounts[3], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member3"), {from: eth.accounts[4], gas:700000});
while (txpool.status.pending > 0) {
}
//console.log("RESULT: users(0)=" + meetupBase.getUser(0));
//console.log("RESULT: users(1)=" + meetupBase.users(1));
//date = 1525696722;
//timestampToStr(date);
//dateTimeStr = "Sun, 01 Dec 2019 18:00:00 AEST";
//strToTimestamp(dateTimeStr);
for (i = 0; i < 5; i++) {   
  console.log("RESULT: " + i + " Name: "+web3.toAscii(meetupBase.users(i)[2])+
            " Creation Time: " + timestampToStr(meetupBase.users(i)[0])  +
            " Address: " + meetupBase.users(i)[1]);
}
// -----------------------------------------------------------------------------
var checkMeetupMessage = "Check meetups";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkMeetupMessage + " ---");
console.log("RESULT: meetups.length=" + meetupBase.getMeetupCount());
// Display the values of var1 and var2
console.log("RESULT: var1=");
//console.log("RESULT: var1=" + meetupBase.var1());
//console.log("RESULT: var2=" + meetupBase.var2());
//console.log("RESULT: ");
// -----------------------------------------------------------------------------
var modifyVarssMessage = "Modifying Vars";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + modifyVarssMessage + " ---");
//var modifyVars1Tx = MeetupBase.setVar1("Hello, World!4567890123456789012345", {from: eth.accounts[0], gas: 100000});
//var modifyVars2Tx = MeetupBase.setVar2(456, {from: eth.accounts[0], gas: 100000});
//while (txpool.status.pending > 0) {
//}
// Display the transaction status
//console.log("RESULT: modifyVars1Tx=" + JSON.stringify(eth.getTransaction(modifyVars1Tx)));
//console.log("RESULT: modifyVars1TxReceipt=" + JSON.stringify(eth.getTransactionReceipt(modifyVars1Tx)));
//console.log("RESULT: modifyVars2Tx=" + JSON.stringify(eth.getTransaction(modifyVars2Tx)));
//console.log("RESULT: modifyVars2TxReceipt=" + JSON.stringify(eth.getTransactionReceipt(modifyVars2Tx)));
// Display the new values of var1 and var2
//console.log("RESULT: var1=" + MeetupBase.var1());
//console.log("RESULT: var2=" + MeetupBase.var2());
//console.log("RESULT: ");
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
//geth --datadir ./testchain attach << EOF
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Register users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
//console.log("RESULT: users(0)=" + meetupBase.users(0));
//console.log("RESULT: users(1)=" + meetupBase.users(1));
meetupBase.createUser(web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Assistant"), {from: eth.accounts[1], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member1"), {from: eth.accounts[2], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member2"), {from: eth.accounts[3], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member3"), {from: eth.accounts[4], gas:700000});
while (txpool.status.pending > 0) {
}
//console.log("RESULT: users(0)=" + meetupBase.getUser(0));
//console.log("RESULT: users(1)=" + meetupBase.users(1));
for (i = 0; i < 5; i++) {   
  console.log("RESULT: " + i + " Name: "+web3.toAscii(meetupBase.users(i)[2])+
            " Creation Time: " + timestampToStr(meetupBase.users(i)[0])  +
            " Address: " + meetupBase.users(i)[1]);
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Sun, 01 Dec 2019 18:00:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var checkMeetupMessage = "Create meetups";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
//date = 1525696722;
//timestampToStr(date);
dateTimeStr = "Sun, 01 Dec 2019 18:00:00 AEST";
//strToTimestamp(dateTimeStr);
meetupBase.createMeetup(strToTimestamp(dateTimeStr), 100, {from: eth.accounts[0], gas: 4000000})
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
// -----------------------------------------------------------------------------
var modifyVarssMessage = "Modifying Vars";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + modifyVarssMessage + " ---");
//var modifyVars1Tx = MeetupBase.setVar1("Hello, World!4567890123456789012345", {from: eth.accounts[0], gas: 100000});
//var modifyVars2Tx = MeetupBase.setVar2(456, {from: eth.accounts[0], gas: 100000});
//while (txpool.status.pending > 0) {
//}
// Display the transaction status
//console.log("RESULT: modifyVars1Tx=" + JSON.stringify(eth.getTransaction(modifyVars1Tx)));
//console.log("RESULT: modifyVars1TxReceipt=" + JSON.stringify(eth.getTransactionReceipt(modifyVars1Tx)));
//console.log("RESULT: modifyVars2Tx=" + JSON.stringify(eth.getTransaction(modifyVars2Tx)));
//console.log("RESULT: modifyVars2TxReceipt=" + JSON.stringify(eth.getTransactionReceipt(modifyVars2Tx)));
// Display the new values of var1 and var2
//console.log("RESULT: var1=" + MeetupBase.var1());
//console.log("RESULT: var2=" + MeetupBase.var2());
//console.log("RESULT: ");
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Register users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
//console.log("RESULT: users(0)=" + meetupBase.users(0));
//console.log("RESULT: users(1)=" + meetupBase.users(1));
meetupBase.createUser(web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Assistant"), {from: eth.accounts[1], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member1"), {from: eth.accounts[2], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member2"), {from: eth.accounts[3], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member3"), {from: eth.accounts[4], gas:700000});
while (txpool.status.pending > 0) {
}
//console.log("RESULT: users(0)=" + meetupBase.getUser(0));
//console.log("RESULT: users(1)=" + meetupBase.users(1));
for (i = 0; i < 5; i++) {   
  console.log("RESULT: " + i + " Name: "+web3.toAscii(meetupBase.users(i)[2])+
            " Creation Time: " + timestampToStr(meetupBase.users(i)[0])  +
            " Address: " + meetupBase.users(i)[1]);
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Sun, 01 Dec 2019 18:00:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var checkMeetupMessage = "Create meetups";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
//date = 1525696722;
//timestampToStr(date);
dateTimeStr = "Sun, 01 Dec 2019 18:00:00 AEST";
//strToTimestamp(dateTimeStr);
meetupBase.createMeetup(strToTimestamp(dateTimeStr), 100, {from: eth.accounts[0], gas: 4000000})
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
// -----------------------------------------------------------------------------
var modifyVarssMessage = "Modifying Vars";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + modifyVarssMessage + " ---");
//var modifyVars1Tx = MeetupBase.setVar1("Hello, World!4567890123456789012345", {from: eth.accounts[0], gas: 100000});
//var modifyVars2Tx = MeetupBase.setVar2(456, {from: eth.accounts[0], gas: 100000});
//while (txpool.status.pending > 0) {
//}
// Display the transaction status
//console.log("RESULT: modifyVars1Tx=" + JSON.stringify(eth.getTransaction(modifyVars1Tx)));
//console.log("RESULT: modifyVars1TxReceipt=" + JSON.stringify(eth.getTransactionReceipt(modifyVars1Tx)));
//console.log("RESULT: modifyVars2Tx=" + JSON.stringify(eth.getTransaction(modifyVars2Tx)));
//console.log("RESULT: modifyVars2TxReceipt=" + JSON.stringify(eth.getTransactionReceipt(modifyVars2Tx)));
// Display the new values of var1 and var2
//console.log("RESULT: var1=" + MeetupBase.var1());
//console.log("RESULT: var2=" + MeetupBase.var2());
//console.log("RESULT: ");
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Register users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
//console.log("RESULT: users(0)=" + meetupBase.users(0));
//console.log("RESULT: users(1)=" + meetupBase.users(1));
meetupBase.createUser(web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Assistant"), {from: eth.accounts[1], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member1"), {from: eth.accounts[2], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member2"), {from: eth.accounts[3], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member3"), {from: eth.accounts[4], gas:700000});
while (txpool.status.pending > 0) {
}
//console.log("RESULT: users(0)=" + meetupBase.getUser(0));
//console.log("RESULT: users(1)=" + meetupBase.users(1));
for (i = 0; i < 5; i++) {   
  console.log("RESULT: " + i + " Name: "+web3.toAscii(meetupBase.users(i)[2])+
            " Creation Time: " + timestampToStr(meetupBase.users(i)[0])  +
            " Address: " + meetupBase.users(i)[1]);
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Sun, 01 Dec 2019 18:00:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var checkMeetupMessage = "Create meetups";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
//date = 1525696722;
//timestampToStr(date);
dateTimeStr = "Sun, 01 Dec 2019 18:00:00 AEST";
strToTimestamp(dateTimeStr);
meetupBase.createMeetup(strToTimestamp(dateTimeStr), 100, {from: eth.accounts[0], gas: 4000000});
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
// -----------------------------------------------------------------------------
var modifyVarssMessage = "Modifying Vars";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + modifyVarssMessage + " ---");
//var modifyVars1Tx = MeetupBase.setVar1("Hello, World!4567890123456789012345", {from: eth.accounts[0], gas: 100000});
//var modifyVars2Tx = MeetupBase.setVar2(456, {from: eth.accounts[0], gas: 100000});
//while (txpool.status.pending > 0) {
//}
// Display the transaction status
//console.log("RESULT: modifyVars1Tx=" + JSON.stringify(eth.getTransaction(modifyVars1Tx)));
//console.log("RESULT: modifyVars1TxReceipt=" + JSON.stringify(eth.getTransactionReceipt(modifyVars1Tx)));
//console.log("RESULT: modifyVars2Tx=" + JSON.stringify(eth.getTransaction(modifyVars2Tx)));
//console.log("RESULT: modifyVars2TxReceipt=" + JSON.stringify(eth.getTransactionReceipt(modifyVars2Tx)));
// Display the new values of var1 and var2
//console.log("RESULT: var1=" + MeetupBase.var1());
//console.log("RESULT: var2=" + MeetupBase.var2());
//console.log("RESULT: ");
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
//geth --datadir ./testchain attach << EOF
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Register users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
//console.log("RESULT: users(0)=" + meetupBase.users(0));
//console.log("RESULT: users(1)=" + meetupBase.users(1));
meetupBase.createUser(web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Assistant"), {from: eth.accounts[1], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member1"), {from: eth.accounts[2], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member2"), {from: eth.accounts[3], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member3"), {from: eth.accounts[4], gas:700000});
while (txpool.status.pending > 0) {
}
//console.log("RESULT: users(0)=" + meetupBase.getUser(0));
//console.log("RESULT: users(1)=" + meetupBase.users(1));
for (i = 0; i < 5; i++) {   
  console.log("RESULT: " + i + " Name: "+web3.toAscii(meetupBase.users(i)[2])+
            " Creation Time: " + timestampToStr(meetupBase.users(i)[0])  +
            " Address: " + meetupBase.users(i)[1]);
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Sun, 01 Dec 2019 18:00:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var checkMeetupMessage = "Create meetups";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
//date = 1525696722;
//timestampToStr(date);
dateTimeStr = "Sun, 01 Dec 2019 18:00:00 AEST";
strToTimestamp(dateTimeStr);
meetupBase.createMeetup(strToTimestamp(dateTimeStr), 100, {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
// -----------------------------------------------------------------------------
var modifyVarssMessage = "Modifying Vars";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + modifyVarssMessage + " ---");
//var modifyVars1Tx = MeetupBase.setVar1("Hello, World!4567890123456789012345", {from: eth.accounts[0], gas: 100000});
//var modifyVars2Tx = MeetupBase.setVar2(456, {from: eth.accounts[0], gas: 100000});
//while (txpool.status.pending > 0) {
//}
// Display the transaction status
//console.log("RESULT: modifyVars1Tx=" + JSON.stringify(eth.getTransaction(modifyVars1Tx)));
//console.log("RESULT: modifyVars1TxReceipt=" + JSON.stringify(eth.getTransactionReceipt(modifyVars1Tx)));
//console.log("RESULT: modifyVars2Tx=" + JSON.stringify(eth.getTransaction(modifyVars2Tx)));
//console.log("RESULT: modifyVars2TxReceipt=" + JSON.stringify(eth.getTransactionReceipt(modifyVars2Tx)));
// Display the new values of var1 and var2
//console.log("RESULT: var1=" + MeetupBase.var1());
//console.log("RESULT: var2=" + MeetupBase.var2());
//console.log("RESULT: ");
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
//geth --datadir ./testchain attach << EOF
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Register users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
//console.log("RESULT: users(0)=" + meetupBase.users(0));
//console.log("RESULT: users(1)=" + meetupBase.users(1));
meetupBase.createUser(web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Assistant"), {from: eth.accounts[1], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member1"), {from: eth.accounts[2], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member2"), {from: eth.accounts[3], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member3"), {from: eth.accounts[4], gas:700000});
while (txpool.status.pending > 0) {
}
//console.log("RESULT: users(0)=" + meetupBase.getUser(0));
//console.log("RESULT: users(1)=" + meetupBase.users(1));
for (i = 0; i < 5; i++) {   
  console.log("RESULT: " + i + " Name: "+web3.toAscii(meetupBase.users(i)[2])+
            " Creation Time: " + timestampToStr(meetupBase.users(i)[0])  +
            " Address: " + meetupBase.users(i)[1]);
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Sun, 01 Dec 2019 18:00:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var checkMeetupMessage = "Create meetups";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
meetupBase.createMeetup(strToTimestamp(dateTimeStr), 100, {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
var i = 0;
console.log("RESULT: Meetup #" + (i+1) + 
          " Creation Time: " + timestampToStr(meetupBase.getMeetup(i)[0])  +
          " Start Time: " + timestampToStr(meetupBase.getMeetup(i)[1])  +
          " Max Capacity: " + meetupBase.getMeetup(i)[2]);
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
//geth --datadir ./testchain attach << EOF
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.users().length);
meetupBase.createUser(web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Assistant"), {from: eth.accounts[1], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member1"), {from: eth.accounts[2], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member2"), {from: eth.accounts[3], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member3"), {from: eth.accounts[4], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: Afore creating users: users.length=" + meetupBase.users().length);
for (i = 0; i < 5; i++) {   
  console.log("RESULT: " + i + " Name: "+web3.toAscii(meetupBase.users(i)[2])+
            " Creation Time: " + timestampToStr(meetupBase.users(i)[0])  +
            " Address: " + meetupBase.users(i)[1]);
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Sun, 01 Dec 2019 18:00:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var checkMeetupMessage = "Create meetups";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
meetupBase.createMeetup(strToTimestamp(dateTimeStr), 100, {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
var i = 0;
console.log("RESULT: Meetup #" + (i+1) + 
          " Creation Time: " + timestampToStr(meetupBase.getMeetup(i)[0])  +
          " Start Time: " + timestampToStr(meetupBase.getMeetup(i)[1])  +
          " Max Capacity: " + meetupBase.getMeetup(i)[2]);
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
//geth --datadir ./testchain attach << EOF
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Assistant"), {from: eth.accounts[1], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member1"), {from: eth.accounts[2], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member2"), {from: eth.accounts[3], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member3"), {from: eth.accounts[4], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
for (i = 0; i < 5; i++) {   
  console.log("RESULT: " + i + " Name: "+web3.toAscii(meetupBase.users(i)[2])+
            " Creation Time: " + timestampToStr(meetupBase.users(i)[0])  +
            " Address: " + meetupBase.users(i)[1]);
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Sun, 01 Dec 2019 18:00:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var checkMeetupMessage = "Create meetups";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
meetupBase.createMeetup(strToTimestamp(dateTimeStr), 100, {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
var i = 0;
console.log("RESULT: Meetup #" + (i+1) + 
          " Creation Time: " + timestampToStr(meetupBase.getMeetup(i)[0])  +
          " Start Time: " + timestampToStr(meetupBase.getMeetup(i)[1])  +
          " Max Capacity: " + meetupBase.getMeetup(i)[2]);
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
//geth --datadir ./testchain attach << EOF
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Assistant"), {from: eth.accounts[1], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member1"), {from: eth.accounts[2], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member2"), {from: eth.accounts[3], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member3"), {from: eth.accounts[4], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
for (i = 0; i < 5; i++) {   
  console.log("RESULT: " + i + " Name: "+web3.toAscii(meetupBase.users(i)[2])+
            " Creation Time: " + timestampToStr(meetupBase.users(i)[0])  +
            " Address: " + meetupBase.users(i)[1]);
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Sun, 01 Dec 2019 18:00:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var checkMeetupMessage = "Create meetups";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
meetupBase.createMeetup(strToTimestamp(dateTimeStr), 100, "Smart contract 101", {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
var i = 0;
console.log("RESULT: Meetup #" + (i+1) + 
          " Creation Time: " + timestampToStr(meetupBase.getMeetup(i)[0])  +
          " Start Time: " + timestampToStr(meetupBase.getMeetup(i)[1])  +
          " Max Capacity: " + meetupBase.getMeetup(i)[2] + 
          " Topic: " + meetupBase.getMeetup(i)[3]);
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
//geth --datadir ./testchain attach << EOF
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Assistant"), {from: eth.accounts[1], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member1"), {from: eth.accounts[2], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member2"), {from: eth.accounts[3], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member3"), {from: eth.accounts[4], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
for (i = 0; i < 5; i++) {   
  console.log("RESULT: " + i + " Name: "+web3.toAscii(meetupBase.users(i)[2])+
            " Creation Time: " + timestampToStr(meetupBase.users(i)[0])  +
            " Address: " + meetupBase.users(i)[1]);
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Sun, 01 Dec 2019 18:00:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var checkMeetupMessage = "Create meetups";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
meetupBase.createMeetup(strToTimestamp(dateTimeStr), 100, "Smart contract 101", {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
var i = 0;
console.log("RESULT: Meetup #" + (i+1) + 
          " Creation Time: " + timestampToStr(meetupBase.getMeetup(i)[0])  +
          " Start Time: " + timestampToStr(meetupBase.getMeetup(i)[1])  +
          " Max Capacity: " + meetupBase.getMeetup(i)[2] + 
          " Topic: " + meetupBase.getMeetup(i)[3]);
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
//geth --datadir ./testchain attach << EOF
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Assistant"), {from: eth.accounts[1], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member1"), {from: eth.accounts[2], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member2"), {from: eth.accounts[3], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member3"), {from: eth.accounts[4], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
for (i = 0; i < 5; i++) {   
  console.log("RESULT: " + i + " Name: "+web3.toAscii(meetupBase.users(i)[2])+
            " Creation Time: " + timestampToStr(meetupBase.users(i)[0])  +
            " Address: " + meetupBase.users(i)[1]);
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Sun, 01 Dec 2019 18:00:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var checkMeetupMessage = "Create meetups";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
meetupBase.createMeetup(strToTimestamp(dateTimeStr), 100, "Smart contract 101", {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
var i = 0;
console.log("RESULT: Meetup #" + (i+1) + 
          " | Creation Time: " + timestampToStr(meetupBase.getMeetup(i)[0])  +
          " | Start Time: " + timestampToStr(meetupBase.getMeetup(i)[1])  +
          " | Max Capacity: " + meetupBase.getMeetup(i)[2] + 
          " | Topic: " + meetupBase.getMeetup(i)[3]);
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
//geth --datadir ./testchain attach << EOF
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Assistant"), {from: eth.accounts[1], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member1"), {from: eth.accounts[2], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member2"), {from: eth.accounts[3], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member3"), {from: eth.accounts[4], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
for (i = 0; i < 5; i++) {   
  console.log("RESULT: " + i + " | Name: "+web3.toAscii(meetupBase.users(i)[2])+
            " | Creation Time: " + timestampToStr(meetupBase.users(i)[0])  +
            " | Address: " + meetupBase.users(i)[1]);
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Sun, 01 Dec 2019 18:00:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var checkMeetupMessage = "Create meetups";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
meetupBase.createMeetup(strToTimestamp(dateTimeStr), 100, "Smart contract 101", {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
var i = 0;
console.log("RESULT: Meetup #" + (i+1) + 
          " | Creation Time: " + timestampToStr(meetupBase.getMeetup(i)[0])  +
          " | Start Time: " + timestampToStr(meetupBase.getMeetup(i)[1])  +
          " | Max Capacity: " + meetupBase.getMeetup(i)[2] + 
          " | Topic: " + meetupBase.getMeetup(i)[3]);
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
//geth --datadir ./testchain attach << EOF
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Assistant"), {from: eth.accounts[1], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member1"), {from: eth.accounts[2], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member2"), {from: eth.accounts[3], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member3"), {from: eth.accounts[4], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
for (i = 0; i < 5; i++) {   
  console.log("RESULT: " + i + " | Name: "+web3.toAscii(meetupBase.users(i)[2])+
            " | Creation Time: " + timestampToStr(meetupBase.users(i)[0])  +
            " | Address: " + meetupBase.users(i)[1]);
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var checkMeetupMessage = "Create meetups";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
meetupBase.createMeetup(strToTimestamp(dateTimeStr), 100, "Smart contract 101", {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
var i = 0;
console.log("RESULT: Meetup #" + (i+1) + 
          " | Creation Time: " + timestampToStr(meetupBase.getMeetup(i)[0])  +
          " | Start Time: " + timestampToStr(meetupBase.getMeetup(i)[1])  +
          " | Max Capacity: " + meetupBase.getMeetup(i)[2] + 
          " | Topic: " + meetupBase.getMeetup(i)[3]);
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
//geth --datadir ./testchain attach << EOF
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Assistant"), {from: eth.accounts[1], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member1"), {from: eth.accounts[2], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member2"), {from: eth.accounts[3], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member3"), {from: eth.accounts[4], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
for (i = 0; i < 5; i++) {   
  console.log("RESULT: " + i + " | Name: "+web3.toAscii(meetupBase.users(i)[2])+
            " | Creation Time: " + timestampToStr(meetupBase.users(i)[0])  +
            " | Address: " + meetupBase.users(i)[1]);
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var checkMeetupMessage = "Create meetups";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
meetupBase.createMeetup(strToTimestamp(dateTimeStr), 100, "Smart contract 101", [3,4], {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
var i = 0;
console.log("RESULT: Meetup #" + (i+1) + 
          " | Creation Time: " + timestampToStr(meetupBase.getMeetup(i)[0])  +
          " | Start Time: " + timestampToStr(meetupBase.getMeetup(i)[1])  +
          " | Max Capacity: " + meetupBase.getMeetup(i)[2] + 
          " | Topic: " + meetupBase.getMeetup(i)[3] + 
          " | Presenters: " + meetupBase.getMeetup(i)[4][0]) +
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
//geth --datadir ./testchain attach << EOF
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Assistant"), {from: eth.accounts[1], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member1"), {from: eth.accounts[2], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member2"), {from: eth.accounts[3], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member3"), {from: eth.accounts[4], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
for (i = 0; i < 5; i++) {   
  console.log("RESULT: " + i + " | Name: "+web3.toAscii(meetupBase.users(i)[2])+
            " | Creation Time: " + timestampToStr(meetupBase.users(i)[0])  +
            " | Address: " + meetupBase.users(i)[1]);
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var checkMeetupMessage = "Create meetups";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
meetupBase.createMeetup(strToTimestamp(dateTimeStr), 100, "Smart contract 101", [3,4], {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
var i = 0;
console.log("RESULT: Meetup #" + (i+1) + 
          " | Creation Time: " + timestampToStr(meetupBase.getMeetup(i)[0])  +
          " | Start Time: " + timestampToStr(meetupBase.getMeetup(i)[1])  +
          " | Max Capacity: " + meetupBase.getMeetup(i)[2] + 
          " | Topic: " + meetupBase.getMeetup(i)[3] + 
          " | Presenters: " + meetupBase.getMeetup(i)[4][0]) +
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
//geth --datadir ./testchain attach << EOF
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Assistant"), {from: eth.accounts[1], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member1"), {from: eth.accounts[2], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member2"), {from: eth.accounts[3], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member3"), {from: eth.accounts[4], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
for (i = 0; i < 5; i++) {   
  console.log("RESULT: " + i + " | Name: "+web3.toAscii(meetupBase.users(i)[2])+
            " | Creation Time: " + timestampToStr(meetupBase.users(i)[0])  +
            " | Address: " + meetupBase.users(i)[1]);
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var checkMeetupMessage = "Create meetups";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
meetupBase.createMeetup(strToTimestamp(dateTimeStr), 100, "Smart contract 101", [3,4], {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
var i = 0;
console.log("RESULT: Meetup #" + (i+1) + 
          " | Creation Time: " + timestampToStr(meetupBase.getMeetup(i)[0])  +
          " | Start Time: " + timestampToStr(meetupBase.getMeetup(i)[1])  +
          " | Max Capacity: " + meetupBase.getMeetup(i)[2] + 
          " | Topic: " + meetupBase.getMeetup(i)[3] + 
          " | Presenters: " + meetupBase.getMeetup(i)[4][0]) +
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
//geth --datadir ./testchain attach << EOF
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Assistant"), {from: eth.accounts[1], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member1"), {from: eth.accounts[2], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member2"), {from: eth.accounts[3], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member3"), {from: eth.accounts[4], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
for (i = 0; i < 5; i++) {   
  console.log("RESULT: " + i + " | Name: "+web3.toAscii(meetupBase.users(i)[2])+
            " | Creation Time: " + timestampToStr(meetupBase.users(i)[0])  +
            " | Address: " + meetupBase.users(i)[1]);
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var checkMeetupMessage = "Create meetups";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
meetupBase.createMeetup(strToTimestamp(dateTimeStr), 100, "Smart contract 101", [3,4], {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
var i = 0;
console.log("RESULT: Meetup #" + (i+1) + 
          " | Creation Time: " + timestampToStr(meetupBase.getMeetup(i)[0])  +
          " | Start Time: " + timestampToStr(meetupBase.getMeetup(i)[1])  +
          " | Max Capacity: " + meetupBase.getMeetup(i)[2] + 
          " | Topic: " + meetupBase.getMeetup(i)[3] + 
          " | Presenters: " + meetupBase.getMeetup(i)[4][0]) +
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Assistant"), {from: eth.accounts[1], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member1"), {from: eth.accounts[2], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member2"), {from: eth.accounts[3], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member3"), {from: eth.accounts[4], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
for (i = 0; i < 5; i++) {   
  console.log("RESULT: " + i + " | Name: "+web3.toAscii(meetupBase.users(i)[2])+
            " | Creation Time: " + timestampToStr(meetupBase.users(i)[0])  +
            " | Address: " + meetupBase.users(i)[1]);
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var checkMeetupMessage = "Create meetups";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
meetupBase.createMeetup(strToTimestamp(dateTimeStr), 100, "Smart contract 101", [3,4], {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
var i = 0;
console.log("RESULT: Meetup #" + (i+1) + 
          " | Creation Time: " + timestampToStr(meetupBase.getMeetup(i)[0])  +
          " | Start Time: " + timestampToStr(meetupBase.getMeetup(i)[1])  +
          " | Max Capacity: " + meetupBase.getMeetup(i)[2] + 
          " | Topic: " + meetupBase.getMeetup(i)[3] + 
          " | Presenters: " + meetupBase.getMeetup(i)[4][0]) +
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Assistant"), {from: eth.accounts[1], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member1"), {from: eth.accounts[2], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member2"), {from: eth.accounts[3], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member3"), {from: eth.accounts[4], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
for (i = 0; i < 5; i++) {   
  console.log("RESULT: " + i + " | Name: "+web3.toAscii(meetupBase.users(i)[2])+
            " | Creation Time: " + timestampToStr(meetupBase.users(i)[0])  +
            " | Address: " + meetupBase.users(i)[1]);
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var checkMeetupMessage = "Create meetups";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
meetupBase.createMeetup(strToTimestamp(dateTimeStr), 100, "Smart contract 101", [0,1], {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
var i = 0;
console.log("RESULT: Meetup #" + (i+1) + 
          " | Creation Time: " + timestampToStr(meetupBase.getMeetup(i)[0])  +
          " | Start Time: " + timestampToStr(meetupBase.getMeetup(i)[1])  +
          " | Max Capacity: " + meetupBase.getMeetup(i)[2] + 
          " | Topic: " + meetupBase.getMeetup(i)[3] + 
          " | Presenters: " + meetupBase.getMeetup(i)[4][0]) +
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Assistant"), {from: eth.accounts[1], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member1"), {from: eth.accounts[2], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member2"), {from: eth.accounts[3], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member3"), {from: eth.accounts[4], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
for (i = 0; i < 5; i++) {   
  console.log("RESULT: " + i + " | Name: "+web3.toAscii(meetupBase.users(i)[2])+
            " | Creation Time: " + timestampToStr(meetupBase.users(i)[0])  +
            " | Address: " + meetupBase.users(i)[1]);
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var checkMeetupMessage = "Create meetups";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
meetupBase.createMeetup(strToTimestamp(dateTimeStr), 100, "Smart contract 101", [0,1], {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
var i = 0;
console.log("RESULT: Meetup #" + (i+1) + 
          " | Creation Time: " + timestampToStr(meetupBase.getMeetup(i)[0])  +
          " | Start Time: " + timestampToStr(meetupBase.getMeetup(i)[1])  +
          " | Max Capacity: " + meetupBase.getMeetup(i)[2] + 
          " | Topic: " + meetupBase.getMeetup(i)[3] + 
          " | Presenters: " + meetupBase.getMeetup(i)[4][0] +
          " | Registration List: " + meetupBase.getMeetup(i)[5][0]);
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Assistant"), {from: eth.accounts[1], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member1"), {from: eth.accounts[2], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member2"), {from: eth.accounts[3], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member3"), {from: eth.accounts[4], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
for (i = 0; i < 5; i++) {   
  console.log("RESULT: " + i + " | Name: "+web3.toAscii(meetupBase.users(i)[2])+
            " | Creation Time: " + timestampToStr(meetupBase.users(i)[0])  +
            " | Address: " + meetupBase.users(i)[1]);
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var checkMeetupMessage = "Create meetups";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
meetupBase.createMeetup(strToTimestamp(dateTimeStr), 100, "Smart contract 101", [3, 4], {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
var i = 0;
console.log("RESULT: Meetup #" + (i+1) + 
          " | Creation Time: " + timestampToStr(meetupBase.getMeetup(i)[0])  +
          " | Start Time: " + timestampToStr(meetupBase.getMeetup(i)[1])  +
          " | Max Capacity: " + meetupBase.getMeetup(i)[2] + 
          " | Topic: " + meetupBase.getMeetup(i)[3] + 
          " | Presenters: " + meetupBase.getMeetup(i)[4][0] +
          " | Registration List: " + meetupBase.getMeetup(i)[5][0] + 
          " | Presenter Names: " + meetupBase.getMeetup(i)[6]);
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Assistant"), {from: eth.accounts[1], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member1"), {from: eth.accounts[2], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member2"), {from: eth.accounts[3], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member3"), {from: eth.accounts[4], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
for (i = 0; i < 5; i++) {   
  console.log("RESULT: " + i + " | Name: "+web3.toAscii(meetupBase.users(i)[2])+
            " | Creation Time: " + timestampToStr(meetupBase.users(i)[0])  +
            " | Address: " + meetupBase.users(i)[1]);
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var checkMeetupMessage = "Create meetups";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
meetupBase.createMeetup(strToTimestamp(dateTimeStr), 100, "Smart contract 101", [3, 4], {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
var i = 0;
console.log("RESULT: Meetup #" + (i+1) + 
          " | Creation Time: " + timestampToStr(meetupBase.getMeetup(i)[0])  +
          " | Start Time: " + timestampToStr(meetupBase.getMeetup(i)[1])  +
          " | Max Capacity: " + meetupBase.getMeetup(i)[2] + 
          " | Topic: " + meetupBase.getMeetup(i)[3] + 
          " | Presenters: " + meetupBase.getMeetup(i)[4][0] +
          " | Registration List: " + meetupBase.getMeetup(i)[5][0] + 
          " | Presenter Names: " + web3.toAscii(meetupBase.getMeetup(i)[6][0]));
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Assistant"), {from: eth.accounts[1], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member1"), {from: eth.accounts[2], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member2"), {from: eth.accounts[3], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member3"), {from: eth.accounts[4], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
for (i = 0; i < 5; i++) {   
  console.log("RESULT: " + i + " | Name: "+web3.toAscii(meetupBase.users(i)[2])+
            " | Creation Time: " + timestampToStr(meetupBase.users(i)[0])  +
            " | Address: " + meetupBase.users(i)[1]);
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var checkMeetupMessage = "Create meetups";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
meetupBase.createMeetup(strToTimestamp(dateTimeStr), 100, "Smart contract 101", [3, 4], {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
var i = 0;
console.log("RESULT: Meetup #" + (i+1) + 
          " | Creation Time: " + timestampToStr(meetupBase.getMeetup(i)[0])  +
          " | Start Time: " + timestampToStr(meetupBase.getMeetup(i)[1])  +
          " | Max Capacity: " + meetupBase.getMeetup(i)[2] + 
          " | Topic: " + meetupBase.getMeetup(i)[3] + 
          " | Presenters: " + meetupBase.getMeetup(i)[4] +
          " | Registration List: " + meetupBase.getMeetup(i)[5]);
// " | Presenter Names: " + web3.toAscii(meetupBase.getMeetup(i)[6][0])
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Assistant"), {from: eth.accounts[1], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member1"), {from: eth.accounts[2], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member2"), {from: eth.accounts[3], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member3"), {from: eth.accounts[4], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
for (i = 0; i < 5; i++) {   
  console.log("RESULT: " + i + " | Name: "+web3.toAscii(meetupBase.users(i)[2])+
            " | Creation Time: " + timestampToStr(meetupBase.users(i)[0])  +
            " | Address: " + meetupBase.users(i)[1]);
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var checkMeetupMessage = "Create meetups";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
meetupBase.createMeetup(strToTimestamp(dateTimeStr), 100, "Smart contract 101", [3, 4], {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
var i = 0;
console.log("RESULT: Meetup #" + (i+1) + 
          " | Creation Time: " + timestampToStr(meetupBase.getMeetup(i)[0])  +
          " | Start Time: " + timestampToStr(meetupBase.getMeetup(i)[1])  +
          " | Max Capacity: " + meetupBase.getMeetup(i)[2] + 
          " | Topic: " + meetupBase.getMeetup(i)[3] + 
          " | Presenters: " + meetupBase.getMeetup(i)[4].toString() +
          " | Registration List: " + meetupBase.getMeetup(i)[5].toString());
// " | Presenter Names: " + web3.toAscii(meetupBase.getMeetup(i)[6][0])
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Assistant"), {from: eth.accounts[1], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member1"), {from: eth.accounts[2], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member2"), {from: eth.accounts[3], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member3"), {from: eth.accounts[4], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
for (i = 0; i < 5; i++) {   
  console.log("RESULT: " + i + " | Name: "+web3.toAscii(meetupBase.users(i)[2])+
            " | Creation Time: " + timestampToStr(meetupBase.users(i)[0])  +
            " | Address: " + meetupBase.users(i)[1]);
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var checkMeetupMessage = "Create meetups";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
meetupBase.createMeetup(strToTimestamp(dateTimeStr), 100, "Smart contract 101", [3, 4], {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
var i = 0;
console.log("RESULT: Meetup #" + (i+1) + 
          " | Creation Time: " + timestampToStr(meetupBase.getMeetup(i)[0])  +
          " | Start Time: " + timestampToStr(meetupBase.getMeetup(i)[1])  +
          " | Max Capacity: " + meetupBase.getMeetup(i)[2] + 
          " | Topic: " + meetupBase.getMeetup(i)[3] + 
          " | First presenters: " + meetupBase.getMeetup(i)[4].[0] +
          " | First registration: " + meetupBase.getMeetup(i)[5].[0]);
// " | Presenter Names: " + web3.toAscii(meetupBase.getMeetup(i)[6][0])
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Assistant"), {from: eth.accounts[1], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member1"), {from: eth.accounts[2], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member2"), {from: eth.accounts[3], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member3"), {from: eth.accounts[4], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
for (i = 0; i < 5; i++) {   
  console.log("RESULT: " + i + " | Name: "+web3.toAscii(meetupBase.users(i)[2])+
            " | Creation Time: " + timestampToStr(meetupBase.users(i)[0])  +
            " | Address: " + meetupBase.users(i)[1]);
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var checkMeetupMessage = "Create meetups";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
meetupBase.createMeetup(strToTimestamp(dateTimeStr), 100, "Smart contract 101", [3, 4], {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
var i = 0;
console.log("RESULT: Meetup #" + (i+1) + 
          " | Creation Time: " + timestampToStr(meetupBase.getMeetup(i)[0])  +
          " | Start Time: " + timestampToStr(meetupBase.getMeetup(i)[1])  +
          " | Max Capacity: " + meetupBase.getMeetup(i)[2] + 
          " | Topic: " + meetupBase.getMeetup(i)[3] + 
          " | First presenters: " + meetupBase.getMeetup(i)[4][0] +
          " | First registration: " + meetupBase.getMeetup(i)[5][0]);
// " | Presenter Names: " + web3.toAscii(meetupBase.getMeetup(i)[6][0])
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Assistant"), {from: eth.accounts[1], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member1"), {from: eth.accounts[2], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member2"), {from: eth.accounts[3], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member3"), {from: eth.accounts[4], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
for (i = 0; i < 5; i++) {   
  console.log("RESULT: " + i + " | Name: "+web3.toAscii(meetupBase.users(i)[2])+
            " | Creation Time: " + timestampToStr(meetupBase.users(i)[0])  +
            " | Address: " + meetupBase.users(i)[1]);
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var checkMeetupMessage = "Create meetups";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
meetupBase.createMeetup(strToTimestamp(dateTimeStr), 100, "Smart contract 101", [3, 4], {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
var i = 0;
console.log("RESULT: Meetup #" + (i+1) + 
          " | Creation Time: " + timestampToStr(meetupBase.getMeetup(i)[0])  +
          " | Start Time: " + timestampToStr(meetupBase.getMeetup(i)[1])  +
          " | Max Capacity: " + meetupBase.getMeetup(i)[2] + 
          " | Topic: " + meetupBase.getMeetup(i)[3] + 
          " | Presenters: " + meetupBase.getMeetup(i)[4][0] +
          " | Registration List: " + meetupBase.getMeetup(i)[5][0]);
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Assistant"), {from: eth.accounts[1], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member1"), {from: eth.accounts[2], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member2"), {from: eth.accounts[3], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member3"), {from: eth.accounts[4], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
for (i = 0; i < 5; i++) {   
  console.log("RESULT: " + i + " | Name: "+web3.toAscii(meetupBase.users(i)[2])+
            " | Creation Time: " + timestampToStr(meetupBase.users(i)[0])  +
            " | Address: " + meetupBase.users(i)[1]);
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var checkMeetupMessage = "Create meetups";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
meetupBase.createMeetup(strToTimestamp(dateTimeStr), 100, "Smart contract 101", [3, 4], {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
var i = 0;
console.log("RESULT: Meetup #" + (i+1) + 
          " | Creation Time: " + timestampToStr(meetupBase.getMeetup(i)[0])  +
          " | Start Time: " + timestampToStr(meetupBase.getMeetup(i)[1])  +
          " | Max Capacity: " + meetupBase.getMeetup(i)[2] + 
          " | Topic: " + meetupBase.getMeetup(i)[3] + 
          " | Presenters: " + meetupBase.getMeetup(i)[4][0] +
          " | Registration List: " + meetupBase.getMeetup(i)[5][0]);
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Assistant"), {from: eth.accounts[1], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member1"), {from: eth.accounts[2], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member2"), {from: eth.accounts[3], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member3"), {from: eth.accounts[4], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
for (i = 0; i < 5; i++) {   
  console.log("RESULT: " + i + " | Name: "+web3.toAscii(meetupBase.users(i)[2])+
            " | Creation Time: " + timestampToStr(meetupBase.users(i)[0])  +
            " | Address: " + meetupBase.users(i)[1]);
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var checkMeetupMessage = "Create meetups";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
meetupBase.createMeetup(strToTimestamp(dateTimeStr), 100, "Smart contract 101", [3, 4], {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
var i = 0;
console.log("RESULT: Meetup #" + (i+1) + 
          " | Creation Time: " + timestampToStr(meetupBase.getMeetup(i)[0])  +
          " | Start Time: " + timestampToStr(meetupBase.getMeetup(i)[1])  +
          " | Max Capacity: " + meetupBase.getMeetup(i)[2] + 
          " | Topic: " + meetupBase.getMeetup(i)[3] + 
          " | Presenters: " + meetupBase.getMeetup(i)[4] +
          " | Registration List: " + meetupBase.getMeetup(i)[5]);
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
//geth --datadir ./testchain attach << EOF
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Assistant"), {from: eth.accounts[1], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member1"), {from: eth.accounts[2], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member2"), {from: eth.accounts[3], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member3"), {from: eth.accounts[4], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
for (i = 0; i < 5; i++) {   
  console.log("RESULT: " + i + " | Name: "+web3.toAscii(meetupBase.users(i)[2])+
            " | Creation Time: " + timestampToStr(meetupBase.users(i)[0])  +
            " | Address: " + meetupBase.users(i)[1]);
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var checkMeetupMessage = "Create meetups";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
meetupBase.createMeetup(strToTimestamp(dateTimeStr), 100, "Smart contract 101", [3, 4], {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
var i = 0;
console.log("RESULT: Meetup #" + (i+1) + 
          " | Creation Time: " + timestampToStr(meetupBase.getMeetup(i)[0])  +
          " | Start Time: " + timestampToStr(meetupBase.getMeetup(i)[1])  +
          " | Max Capacity: " + meetupBase.getMeetup(i)[2] + 
          " | Topic: " + meetupBase.getMeetup(i)[3] + 
          " | Presenter IDs: " + meetupBase.getMeetup(i)[4] +
          " | Registered User IDs: " + meetupBase.getMeetup(i)[5]);
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
//geth --datadir ./testchain attach << EOF
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Assistant"), {from: eth.accounts[1], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member1"), {from: eth.accounts[2], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member2"), {from: eth.accounts[3], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member3"), {from: eth.accounts[4], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
for (i = 0; i < 5; i++) {   
  console.log("RESULT: " + i + " | Name: "+web3.toAscii(meetupBase.users(i)[2])+
            " | Creation Time: " + timestampToStr(meetupBase.users(i)[0])  +
            " | Address: " + meetupBase.users(i)[1]);
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var checkMeetupMessage = "Create meetups";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
meetupBase.createMeetup(strToTimestamp(dateTimeStr), 100, "Smart contract 101", [3, 4], {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
var i = 0;
console.log("RESULT: Meetup #" + (i+1) + 
          " | Creation Time: " + timestampToStr(meetupBase.getMeetup(i)[0])  +
          " | Start Time: " + timestampToStr(meetupBase.getMeetup(i)[1])  +
          " | Max Capacity: " + meetupBase.getMeetup(i)[2] + 
          " | Topic: " + meetupBase.getMeetup(i)[3] + 
          " | Presenter IDs: " + meetupBase.getMeetup(i)[4] +
          " | Registered User IDs: " + meetupBase.getMeetup(i)[5]);
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})